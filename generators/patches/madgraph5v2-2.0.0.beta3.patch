--- madgraph/interface/common_run_interface.py	2013-09-03 13:10:10.000000000 +0200
+++ madgraph/interface/common_run_interface.py	2013-09-03 13:09:04.000000000 +0200
@@ -36,6 +36,12 @@
 import time
 import traceback
 
+#Set models dir
+if not "MG5_MODEL_DIR" in os.environ:
+   print "You have to set MG5_MODEL_DIR to point to the models directory"
+   exit(1) 
+   
+MG5_MODEL_DIR=os.environ.get('MG5_MODEL_DIR')
 
 try:
     import readline
@@ -1026,7 +1032,7 @@
             if args[1] == 'None':
                 args[1] = None
             self.options['fortran_compiler'] = args[1]
-            current = misc.detect_current_compiler(pjoin(self.me_dir,'Source','make_opts'))
+            current = misc.detect_current_compiler(pjoin(os.environ.get('MG5_MODEL_DIR'),'Source','make_opts'))
             if current != args[1] and args[1] != None:
                 misc.mod_compilator(self.me_dir, args[1], current)
         elif args[0] == "run_mode":
--- madgraph/interface/madgraph_interface.py	2013-09-03 13:10:10.000000000 +0200
+++ madgraph/interface/madgraph_interface.py	2013-09-03 13:09:04.000000000 +0200
@@ -88,6 +88,13 @@
 import aloha.create_aloha as create_aloha
 import aloha.aloha_lib as aloha_lib
 
+#Set models dir
+if not "MG5_MODEL_DIR" in os.environ:
+   print "You have to set MG5_MODEL_DIR to point to the models directory"
+   exit(1) 
+   
+MG5_MODEL_DIR=os.environ.get('MG5_MODEL_DIR')
+
 # Special logger for the Cmd Interface
 logger = logging.getLogger('cmdprint') # -> stdout
 logger_stderr = logging.getLogger('fatalerror') # ->stderr
@@ -930,11 +937,11 @@
         """ identify the import type of a given path 
         valid output: model/model_v4/proc_v4/command"""
         
-        possibility = [pjoin(MG5DIR,'models',path), \
-                     pjoin(MG5DIR,'models',path+'_v4'), path]
+        possibility = [pjoin(MG5_MODEL_DIR,'models',path), \
+                     pjoin(MG5_MODEL_DIR,'models',path+'_v4'), path]
         if '-' in path:
             name = path.rsplit('-',1)[0]
-            possibility = [pjoin(MG5DIR,'models',name), name] + possibility
+            possibility = [pjoin(MG5_MODEL_DIR,'models',name), name] + possibility
         # Check if they are a valid directory
         for name in possibility:
             if os.path.isdir(name):
@@ -1934,7 +1941,7 @@
             # find the different possibilities
             all_name = self.find_restrict_card(path, no_restrict=False)
             all_name += self.find_restrict_card(path, no_restrict=False,
-                                        base_dir=pjoin(MG5DIR,'models'))
+                                        base_dir=pjoin(MG5_MODEL_DIR,'models'))
 
             # select the possibility according to the current line           
             all_name = [name+' ' for name in  all_name if name.startswith(text)
@@ -1984,16 +1991,16 @@
         if (len(args) == 2):
             is_model = True
             if mode == 'model':
-                file_cond = lambda p : os.path.exists(pjoin(MG5DIR,'models',p,'particles.py'))
+                file_cond = lambda p : os.path.exists(pjoin(MMG5_MODEL_DIRG5DIR,'models',p,'particles.py'))
                 mod_name = lambda name: name
             elif mode == 'model_v4':
-                file_cond = lambda p :  (os.path.exists(pjoin(MG5DIR,'models',p,'particles.dat')) 
+                file_cond = lambda p :  (os.path.exists(pjoin(MG5_MODEL_DIR,'models',p,'particles.dat')) 
                                       or os.path.exists(pjoin(self._mgme_dir,'Models',p,'particles.dat')))
                 mod_name = lambda name :(name[-3:] != '_v4' and name or name[:-3]) 
             elif mode == 'all':
                 mod_name = lambda name: name
-                file_cond = lambda p : os.path.exists(pjoin(MG5DIR,'models',p,'particles.py')) \
-                                      or os.path.exists(pjoin(MG5DIR,'models',p,'particles.dat')) \
+                file_cond = lambda p : os.path.exists(pjoin(MG5MG5_MODEL_DIRDIR,'models',p,'particles.py')) \
+                                      or os.path.exists(pjoin(MG5_MODEL_DIR,'models',p,'particles.dat')) \
                                       or os.path.exists(pjoin(self._mgme_dir,'Models',p,'particles.dat')) 
             else:
                 cur_path = pjoin(*[a for a in args \
@@ -2005,7 +2012,7 @@
             if is_model:
                 model_list = [mod_name(name) for name in \
                                                 self.path_completion(text,
-                                                pjoin(MG5DIR,'models'),
+                                                pjoin(MG5_MODEL_DIR,'models'),
                                                 only_dirs = True) \
                                                 if file_cond(name)]
                 
@@ -2016,7 +2023,7 @@
                     all_name = []
                     for model_name in model_list:
                         all_name += self.find_restrict_card(model_name, 
-                                            base_dir=pjoin(MG5DIR,'models'))
+                                            base_dir=pjoin(MG5_MODEL_DIR,'models'))
                 if mode == 'all':
                     cur_path = pjoin(*[a for a in args \
                                                         if a.endswith(os.path.sep)])
--- madgraph/iolibs/export_fks.py	2013-09-03 13:10:10.000000000 +0200
+++ madgraph/iolibs/export_fks.py	2013-09-03 13:09:04.000000000 +0200
@@ -53,7 +53,12 @@
 _file_path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0] + '/'
 logger = logging.getLogger('madgraph.export_fks')
 
-
+#Set models dir
+if not "MG5_MODEL_DIR" in os.environ:
+   print "You have to set MG5_MODEL_DIR to point to the models directory"
+   exit(1) 
+   
+MG5_MODEL_DIR=os.environ.get('MG5_MODEL_DIR')
 
 #=================================================================================
 # Class for used of the (non-optimized) Loop process
@@ -70,7 +75,8 @@
         Template, and clean the directory
         For now it is just the same as copy_v4template, but it will be modified
         """
-        mgme_dir = self.mgme_dir
+        mgme_dir = os.environ.get('MG5_MODEL_DIR')
+	#mgme_dir = self.mgme_dir
         dir_path = self.dir_path
         clean =self.opt['clean']
         
@@ -173,7 +179,7 @@
                               self.dir_path+'/bin/internal/save_load_object.py') 
         cp(_file_path+'/iolibs/file_writers.py', 
                               self.dir_path+'/bin/internal/file_writers.py')
-        cp(_file_path+'../models/check_param_card.py', 
+        cp(MG5_MODEL_DIR+'/models/check_param_card.py', 
                               self.dir_path+'/bin/internal/check_param_card.py')
         cp(_file_path+'/__init__.py', self.dir_path+'/bin/internal/__init__.py')
         cp(_file_path+'/various/gen_crossxhtml.py', 
--- madgraph/iolibs/export_v4.py	2013-09-03 13:10:10.000000000 +0200
+++ madgraph/iolibs/export_v4.py	2013-09-03 13:09:04.000000000 +0200
@@ -56,6 +56,13 @@
 _file_path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0] + '/'
 logger = logging.getLogger('madgraph.export_v4')
 
+#Set models dir
+if not "MG5_MODEL_DIR" in os.environ:
+   print "You have to set MG5_MODEL_DIR to point to the models directory"
+   exit(1) 
+   
+MG5_MODEL_DIR=os.environ.get('MG5_MODEL_DIR')
+
 #===============================================================================
 # ProcessExporterFortran
 #===============================================================================
@@ -869,12 +876,12 @@
         if not os.environ.has_key('MADGRAPH_DATA'):
             self.replace_make_opt_compiler(compiler, pjoin(MG5DIR, 'Template/LO'))
 
-    def replace_make_opt_compiler(self, compiler, root_dir = ""):
+    def replace_make_opt_compiler(self, compiler, root_dir = os.environ.get('MG5_MODEL_DIR')):
         """Set FC=compiler in Source/make_opts"""
 
         if not root_dir:
             root_dir = self.dir_path
-        make_opts = pjoin(root_dir, 'Source', 'make_opts')
+        make_opts = pjoin(os.environ.get('MG5_MODEL_DIR'), 'Source', 'make_opts')
         lines = open(make_opts).read().split('\n')
         FC_re = re.compile('^(\s*)FC\s*=\s*.+\s*$')
         for iline, line in enumerate(lines):
@@ -3146,10 +3153,10 @@
                         'rw_para.f', 'testprog.f']
     
         for filename in file_to_link:
-            cp( MG5DIR + '/models/template_files/fortran/' + filename, \
+            cp( MG5_MODEL_DIR + '/models/template_files/fortran/' + filename, \
                                                                 self.dir_path)
             
-        file = open(os.path.join(MG5DIR,\
+        file = open(os.path.join(MG5_MODEL_DIR,\
                               'models/template_files/fortran/rw_para.f')).read()
 
         includes=["include \'coupl.inc\'","include \'input.inc\'"]
@@ -3166,7 +3173,7 @@
         else:
             load_card = ''
             lha_read_filename='lha_read.f'
-        cp( MG5DIR + '/models/template_files/fortran/' + lha_read_filename, \
+        cp( MG5_MODEL_DIR + '/models/template_files/fortran/' + lha_read_filename, \
                                        os.path.join(self.dir_path,'lha_read.f'))
         
         file=file%{'includes':'\n      '.join(includes),
@@ -3176,7 +3183,7 @@
         writer.close()
 
         if self.opt['export_format'] in ['madevent', 'FKS5_default', 'FKS5_optimized']:
-            cp( MG5DIR + '/models/template_files/fortran/makefile_madevent', 
+            cp( MG5_MODEL_DIR + '/models/template_files/fortran/makefile_madevent', 
                 self.dir_path + '/makefile')
             if self.opt['export_format'] in ['FKS5_default', 'FKS5_optimized']:
                 path = pjoin(self.dir_path, 'makefile')
@@ -3185,7 +3192,7 @@
                 open(path, 'w').writelines(text)
 
         elif self.opt['export_format'] in ['standalone', 'standalone_ms', 'madloop','madloop_optimized']:
-            cp( MG5DIR + '/models/template_files/fortran/makefile_standalone', 
+            cp( MG5_MODEL_DIR + '/models/template_files/fortran/makefile_standalone', 
                 self.dir_path + '/makefile')
         else:
             raise MadGraph5Error('Unknown format')
--- madgraph/iolibs/import_v4.py	2013-09-03 13:10:10.000000000 +0200
+++ madgraph/iolibs/import_v4.py	2013-09-03 13:09:04.000000000 +0200
@@ -33,14 +33,21 @@
 
 logger = logging.getLogger('madgraph.import_v4')
 
+#Set models dir
+if not "MG5_MODEL_DIR" in os.environ:
+   print "You have to set MG5_MODEL_DIR to point to the models directory"
+   exit(1) 
+   
+mgme_dir=os.environ.get('MG5_MODEL_DIR')
+
 #===============================================================================
 # import_v4model
 #===============================================================================
-def import_model(model_path, mgme_dir = MG4DIR):
+def import_model(model_path, mgme_dirmg):
     """create a model from a MG4 model directory."""
 
     # Check for a valid directory
-    model_path = find_model_path(model_path, mgme_dir)
+    model_path = find_model_path(model_path, mgme_dir=os.environ.get('MG5_MODEL_DIR'))
 
     files_list = [os.path.join(model_path, 'particles.dat'),\
                   os.path.join(model_path, 'interactions.dat')]
@@ -75,9 +82,9 @@
     return model, model_path  
 
     
-def find_model_path(model_path, mgme_dir):
+def find_model_path(model_path, mgme_dir=os.environ.get('MG5_MODEL_DIR')):
     """Find the path to the model, starting with path model_path."""
-
+    
     # treat simple case (model_path is a valid path/ mgme_dir doesn't exist)
     if os.path.isdir(model_path):
         return model_path
