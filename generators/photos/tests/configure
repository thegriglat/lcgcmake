#!/bin/sh

echo "===> [configure] arguments = $*"

TESTS_SHARED=1
TESTS_ARCHIVE=0
LIBTESTS_VERSION=1.02

# Default generator versions

# Do not put .2 in versions, use extension
extension=
#extension=.2
ALPGEN_VERSION=2.1.4
BLACKMAX_VERSION=2.2.0
CASCADE_VERSION=2.0.1
CHARYBDIS_VERSION=1.003hp
CHARYBDIS2_VERSION=1.0.3
EPOS_VERSION=1.99.crmc.v3400
EVTGEN_VERSION=1.1.0
EVTGENLHC_VERSION=10.0
HEJ_VERSION=1.2
HERWIGPP_VERSION=2.6.3
HERWIG_VERSION=6.520${extension}
HYDJET_VERSION=1.8
HIJING_VERSION=1.36.a
ISAJET_VERSION=7.75.2
JIMMY_VERSION=4.31.3
LHAPDF_VERSION=5.8.8
MCATNLO_VERSION=3.41
MCFM_VERSION=6.2b
PHOJET_VERSION=1.10
PHOTOS_VERSION=215.5
PHOTOSPP_VERSION=3.52
POMWIG_VERSION=2.0${extension}
POWHEG_VERSION=1.0
POWHEGBOX_VERSION=r197
PYQUEN_VERSION=1.5.1
PYTHIA6_VERSION=427${extension}
PYTHIA8_VERSION=175
SHERPA_VERSION=1.4.3${extension}
STARLIGHT_VERSION=r38
TAUOLA_VERSION=28.121${extension}
TAUOLAPP_VERSION=1.1.1a
THEPEG_VERSION=1.8.3
TOPREX_VERSION=4.23
VINCIA_VERSION=1.0.29
WINHAC_VERSION=1.31

# Default external packages versions
# Note: HepMC and CLHEP are defined by libtests and can be found in $LIBTESTS_PATH/{config.mk,config1.mk}
CERNLIB_VERSION=2006a
GSL_VERSION=1.10
ROOT_VERSION=5.34.00
FASTJET_VERSION=2.4.2p1
RIVET_VERSION=1.8.1
BOOST_VERSION=1.48.0_python2.6

function upper() { echo `echo $1 | tr "[:lower:]" "[:upper:]"`; }

# default parameters:
default_mode="lcgcmt64"

# parse configure arguments:
for arg in $* ; do
  case "$arg" in
    "--help" )
      echo -e "\n"\
      "The script for setting up the paths to all generators and external libraries\n"\
      "\n"\
      "  Usage: ./configure [options]\n"\
      "\n"\
      "  Options:\n"\
      "    --help              - prints this help\n"\
      "    --with-{gen}={path} - override the default path to generator/package {gen}\n" \
      "    --with-{gen}version={version}\n"\
      "                        - override the default version of generator/package {gen}\n"\
      "    --tests-shared      - link test routines bin/*.exe against shared libraries (default)\n"\
      "    --tests-archive     - link test routines bin/*.exe against static libraries\n"\
      "    --mode={mode}       - default mode (see './dotest --help' for possible values)\n"
      exit 0
      ;;
#
    "--tests-shared"   ) TESTS_SHARED=1 ;;
    "--tests-archive"  ) TESTS_ARCHIVE=1 ;;
    --mode=*  ) default_mode=${arg#--mode=} ;;
#
    --run-*=*          ) 
                          gen=${arg#--run-} && gen=${gen%=*} && value=${arg#*=}
                          eval GEN=$(upper $gen) && eval RUN_${GEN}=${value}
      ;;
#
    --with-*version=*  ) 
                          gen=${arg#--with-} && gen=${gen%version=*} && value=${arg#*=}
                          eval GEN=$(upper $gen) && eval ${GEN}_VERSION=${value}
      ;;

#
    --with-*=*         ) 
                          gen=${arg#--with-} && gen=${gen%=*} && value=${arg#*=}
                          eval GEN=$(upper $gen) && eval ${GEN}_PATH=${value}
      ;;
#
    *                  )  echo "${arg}: wrong option. Ignored." >&2
                          exit 1
      ;;
  esac
done


# --- find platform name ---
PLATFORM=$(check_platform || true)
if [[ "$PLATFORM" = "" ]] ; then
  echo "ERROR: can not recognize LCG platform."
  echo "       Either the script 'check_platform' is not in current PATH or"
  echo "       environment is incorrect."
  echo "       Most probably you forget to setup environment by genser.rc script" >&2
  exit 1
fi

# ===== set MCGTESTDIR to /tmp/username (if it's empty) ============
: ${MCGTESTDIR:=/tmp/`whoami`} ; export MCGTESTDIR

# === Setup paths for libraries and generators ==========

# the function transforms (dereference):
# variable name -> the value of this variable
# (somethig like ${$var} )
val () { echo ${!1}; }

# translates to lower-case
lower () { echo `echo $1 | tr "[:upper:]" "[:lower:]"`; }

# the function prepare and check paths for the given generator name
# 1st parameter - generator name in UPPER-CASE
# 2nd parameter - list of generator libraries in gcc notation: "-lname_of_lib1 -lname_of_lib2"
# 3rd [optional] - lib subpath (default is "lib")
# 4th [optional] - include subpath (default is "include")
setup_paths () {
  # generator name
  local gen=$1
  local liblist="$2"
  local libsub=${3-"lib"}
  local incsub=${4-"include"}

  if [ "$(val ${gen}_PATH)" = "" ] ; then
    local gen_subpath=$(lower ${gen})/$(val ${gen}_VERSION)
    local gen_root=""
    local mode="$(val RUN_${gen})"
    
    if [[ "$mode" == "" ]] ; then
      mode="$default_mode"
    fi
    
    case "$mode" in
      "mcgtest"  )   gen_root=${MCGTESTDIR}/$gen_subpath ;;
      "mcgrep"   )   gen_root=${MCGREPLICA}/$gen_subpath ;;
      "g3shadow" )   gen_root=${MCGREPLICA}/.work/GBUILD/external/MCGenerators/$gen_subpath ;;
      "mcg" )        gen_root=${MCGENERATORS}/$gen_subpath ;;
      hepmc* )       gen_root=/afs/cern.ch/sw/lcg/external/MCGenerators_$mode/$gen_subpath ;;
      lcgcmt* )      gen_root=/afs/cern.ch/sw/lcg/external/MCGenerators_$mode/$gen_subpath ;;

      * )
        echo "ERROR: unknown mode: $mode"
        exit 1
        ;;
    esac
    
    eval ${gen}_PATH=${gen_root}/${PLATFORM}
    eval SHARE_${gen}_PATH=${gen_root}/share
  fi
  
  eval LIBS_${gen}_PATH=$(val ${gen}_PATH)/$libsub
  eval LIBS_${gen}='-L$(val LIBS_${gen}_PATH)\ $liblist'
  eval LIBS_${gen}_STATIC='-L$(val LIBS_${gen}_PATH)/archive\ $liblist'
  eval INCLUDE_${gen}_PATH=$(val ${gen}_PATH)/$incsub
  eval INCLUDE_${gen}=-I$(val INCLUDE_${gen}_PATH)

  # check for path
  #if ! [ -d $(val ${gen}_PATH) ] ; then
    #echo "WARNING: the ${gen}_PATH directory doesn't exist" >&2
    #echo "         ${gen}_PATH = $(val ${gen}_PATH)" >&2
    #return
    #exit 1
  #fi

  #echo "$gen paths:"
  #echo "  ${gen}_VERSION=$(val ${gen}_VERSION)"
  #echo "  ${gen}_PATH=$(val ${gen}_PATH)"
  #echo "  LIBS_${gen}_PATH=$(val LIBS_${gen}_PATH)"
  #echo "  LIBS_${gen}=$(val LIBS_${gen})"
  #echo "  LIBS_${gen}_STATIC=$(val LIBS_${gen}_STATIC)"
  #echo "  INCLUDE_${gen}_PATH=$(val INCLUDE_${gen}_PATH)"
  #echo "  INCLUDE_${gen}=$(val INCLUDE_${gen})"
  #echo "  SHARE_${gen}=$(val SHARE_${gen}_PATH)"
}


# --- setup paths for external libraries ---
CERNEXT=/afs/cern.ch/sw/lcg/external

# if var not set or is empty, evaluate expression after :-
CERNLIB_PATH=${CERNLIB_PATH:-${CERNEXT}/cernlib/${CERNLIB_VERSION}/${PLATFORM}}
setup_paths CERNLIB

ROOT_PATH=${ROOT_PATH:-${CERNEXT}/../app/releases/ROOT/${ROOT_VERSION}/${PLATFORM}/root}
setup_paths ROOT
ROOTSYS=${ROOT_PATH}

GSL_PATH=${GSL_PATH:-${CERNEXT}/GSL/${GSL_VERSION}/$PLATFORM}
setup_paths GSL

FASTJET_PATH=${FASTJET_PATH:-${CERNEXT}/fastjet/${FASTJET_VERSION}/$PLATFORM}
setup_paths FASTJET

BOOST_PATH=${BOOST_PATH:-${CERNEXT}/Boost/${BOOST_VERSION}/$PLATFORM}
BOOST_MAJOR_VER=$(echo ${BOOST_VERSION} | cut -d . -f 1-2 | tr . _)
setup_paths BOOST "" "lib" "include/boost-${BOOST_MAJOR_VER}" 


# --- setup paths for tools from GENSER repository ---
setup_paths LIBTESTS "-lcernlibgenser -lanalyserhepmc -ltests"
setup_paths RIVET


# --- setup paths for generators ---
setup_paths PYTHIA6 "-lpythia6 -lpythia6_dummy -lpythia6_pdfdummy"
setup_paths HERWIG "-lherwig -lherwig_dummy -lherwig_pdfdummy"
setup_paths JIMMY
setup_paths HEJ
setup_paths BLACKMAX 
setup_paths HERWIGPP
setup_paths THEPEG
setup_paths LHAPDF "-lLHAPDF"
setup_paths PHOTOS "-lphotos"
setup_paths PHOTOSPP "-lPhotosCxxInterface -lPhotosFortran"
setup_paths SHERPA "" "lib/SHERPA-MC" "include/SHERPA-MC"
setup_paths STARLIGHT
setup_paths TOPREX "-ltoprex"
setup_paths PYQUEN "-lpyquen"
setup_paths MCFM "-lMCFM"
setup_paths HIJING "-lhijing -lhijing_dummy -lpythia_hijing"
setup_paths HYDJET "-lhydjet -ljetset73hydjet"
setup_paths CASCADE "-lcascade"
setup_paths ISAJET "-lisajet"
setup_paths CHARYBDIS "-lcharybdis"
setup_paths CHARYBDIS2 "-lcharybdis2"
setup_paths PHOJET "-lphojet"
setup_paths VINCIA
setup_paths WINHAC "-lwinhac -lfoam -lewcdec -lewcall"
setup_paths POWHEG "-lpowheg"
setup_paths POWHEGBOX 
setup_paths MCATNLO
setup_paths TAUOLA "-ltauola -lpretauola"
setup_paths TAUOLAPP "-lTauolaCxxInterface -lTauolaFortran"
setup_paths PYTHIA8 "-lpythia8 -lhepmcinterface -llhapdfdummy"
setup_paths ALPGEN "" "lib/archive"
setup_paths EVTGEN "-lEvtGen -lEvtGenExternal" "lib"
setup_paths EVTGENLHC "-lEvtGen" "lib" ""
setup_paths POMWIG "-lpomwig"
setup_paths EPOS "-lcrmc"

# --- prepare config.mk ---
echo "Creating config.mk ... "

# the function prints names of all variables for given generator name
gen_vars () {
  # 1st - generator name (CAPITAL letters)
  local gen=$1
  echo "${gen}_VERSION ${gen}_PATH LIBS_${gen}_PATH LIBS_${gen} LIBS_${gen}_STATIC INCLUDE_${gen}_PATH INCLUDE_${gen} SHARE_${gen}_PATH"
}

# this is a list of names of all variables to be printed to file config.mk
vars="\
PLATFORM \
$(gen_vars LIBTESTS) TESTS_SHARED TESTS_ARCHIVE \
$(gen_vars THEPEG) \
$(gen_vars GSL) \
$(gen_vars PYTHIA6) \
$(gen_vars HEJ) \
$(gen_vars BLACKMAX) \
$(gen_vars HERWIG) \
$(gen_vars JIMMY) \
$(gen_vars HERWIGPP) \
$(gen_vars LHAPDF) \
$(gen_vars PHOTOS) \
$(gen_vars PHOTOSPP) \
$(gen_vars EVTGEN) \
$(gen_vars EVTGENLHC) \
$(gen_vars SHERPA) \
$(gen_vars STARLIGHT) \
$(gen_vars TOPREX) \
$(gen_vars PYQUEN) \
$(gen_vars MCFM) \
$(gen_vars HIJING) \
$(gen_vars HYDJET) \
$(gen_vars CASCADE) \
$(gen_vars ISAJET) \
$(gen_vars CHARYBDIS) \
$(gen_vars CHARYBDIS2) \
$(gen_vars PHOJET) \
$(gen_vars VINCIA) \
$(gen_vars WINHAC) \
$(gen_vars POWHEG) \
$(gen_vars POWHEGBOX) \
$(gen_vars MCATNLO) \
$(gen_vars TAUOLA) \
$(gen_vars TAUOLAPP) \
$(gen_vars PYTHIA8) \
$(gen_vars ALPGEN) \
$(gen_vars CERNLIB) \
$(gen_vars ROOT) ROOTSYS \
$(gen_vars FASTJET) \
$(gen_vars RIVET) \
$(gen_vars BOOST) \
$(gen_vars POMWIG) \
$(gen_vars EPOS) \
"

# print all vars to config.mk in format var=$var
for i in $vars; do
  echo "$i = $(val $i)"
done > config.mk

echo "<=== [configure]"
