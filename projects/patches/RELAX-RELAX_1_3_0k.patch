Index: Dictionaries/HepPDTRflx/CMakeLists.txt
===================================================================
--- Dictionaries/HepPDTRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/HepPDTRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,7 @@
+find_package(HepPDT)
+
+include_directories(${HEPPDT_INCLUDE_DIR})
+
+relax_dictionary(HepPDT dict/HepPDTDict.h dict/selection.xml LINK_LIBRARIES ${HEPPDT_LIBRARIES})
+
+
Index: Dictionaries/ReflexRflx/CMakeLists.txt
===================================================================
--- Dictionaries/ReflexRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/ReflexRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,5 @@
+
+
+relax_dictionary(Reflex dict/ReflexDict.h dict/selection.xml LINK_LIBRARIES )
+
+
Index: Dictionaries/MathRflx/CMakeLists.txt
===================================================================
--- Dictionaries/MathRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/MathRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+if(GCC_VERSION VERSION_GREATER 4.3)
+  add_definitions(-Wno-array-bounds)
+endif()
+relax_dictionary(Math dict/MathDict.h dict/selection.xml LINK_LIBRARIES ${ROOT_GenVector_LIBRARY})
+
+
Index: Dictionaries/CLHEPRflx/CMakeLists.txt
===================================================================
--- Dictionaries/CLHEPRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/CLHEPRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,7 @@
+find_package(CLHEP)
+
+include_directories(${CLHEP_INCLUDE_DIR} ${ROOT_INCLUDE_DIR})
+
+relax_dictionary(CLHEP dict/CLHEPDict.h dict/selection.xml LINK_LIBRARIES ${CLHEP_LIBRARIES} ${ROOT_LIBRARIES})
+
+
Index: Dictionaries/STLAddRflx/CMakeLists.txt
===================================================================
--- Dictionaries/STLAddRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/STLAddRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+include_directories( ${ROOT_INCLUDE_DIR})
+
+relax_dictionary(STLAdd dict/STLAddDict.h dict/selection.xml LINK_LIBRARIES ${ROOT_LIBRARIES})
+
+
Index: Dictionaries/HepMCRflx/CMakeLists.txt
===================================================================
--- Dictionaries/HepMCRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/HepMCRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,7 @@
+find_package(HepMC)
+
+include_directories(${HEPMC_INCLUDE_DIR})
+
+relax_dictionary(HepMC dict/HepMCDict.h dict/selection.xml LINK_LIBRARIES ${HEPMC_LIBRARIES})
+
+
Index: Dictionaries/CMakeLists.txt
===================================================================
--- Dictionaries/CMakeLists.txt	(revision 0)
+++ Dictionaries/CMakeLists.txt	(revision 0)
@@ -0,0 +1,99 @@
+find_package(ROOT COMPONENTS Reflex GenVector)
+find_package(GCCXML REQUIRED)
+
+#-------------------------------------------------------------------------------
+# relax_generate_dictionary(dictionary headerfile selectionfile OPTIONS opt1 opt2 ...)
+# (Mofified from FindROOT.cmake to adapt to existing specific RELAX naming)
+#-------------------------------------------------------------------------------
+macro(relax_generate_dictionary dictionary _headerfile _selectionfile)
+  CMAKE_PARSE_ARGUMENTS(ARG "" "" "OPTIONS" ${ARGN})
+
+  # Ensure that the path to the header and selection files are absolute
+  if(IS_ABSOLUTE ${_selectionfile})
+   set(selectionfile ${_selectionfile})
+  else()
+   set(selectionfile ${CMAKE_CURRENT_SOURCE_DIR}/${_selectionfile})
+  endif()
+  if(IS_ABSOLUTE ${_headerfile})
+    set(headerfiles ${_headerfile})
+  else()
+    set(headerfiles ${CMAKE_CURRENT_SOURCE_DIR}/${_headerfile})
+  endif()
+  set(gensrcdict ${dictionary}_dict.cpp)
+
+  if(MSVC)
+    set(GCCXML_CXX_COMPILER cl CACHE STRING "Compiler that GCCXML must use.")
+  elseif(APPLE)
+    set(GCCXML_CXX_COMPILER g++ CACHE STRING "Compiler that GCCXML must use.")
+  else()
+    set(GCCXML_CXX_COMPILER ${CMAKE_CXX_COMPILER} CACHE STRING "Compiler that GCCXML must use.")
+  endif()
+  mark_as_advanced(GCCXML_CXX_COMPILER)
+  set(gccxmlopts "--gccxml-compiler ${GCCXML_CXX_COMPILER}")
+
+  set(rootmapname ${CMAKE_SHARED_LIBRARY_PREFIX}${dictionary}Rflx.pamtoor)
+  set(rootmapopts --rootmap=${rootmapname} --rootmap-lib=${CMAKE_SHARED_LIBRARY_PREFIX}${dictionary}Rflx)
+
+  get_directory_property(_incdirs INCLUDE_DIRECTORIES)
+  foreach(d ${CMAKE_CURRENT_SOURCE_DIR} ${_incdirs})
+   set(include_dirs ${include_dirs} -I${d})
+  endforeach()
+
+  get_directory_property(_defs COMPILE_DEFINITIONS)
+  foreach(d ${_defs})
+   set(definitions ${definitions} -D${d})
+  endforeach()
+
+  if(gccxmlopts)
+    set(gccxmlopts "--gccxmlopt=${gccxmlopts}")
+  endif()
+  get_filename_component(GCCXML_home ${GCCXML} PATH)
+  add_custom_command(
+    OUTPUT ${gensrcdict} ${rootmapname}
+    COMMAND ${ROOT_genreflex_CMD}
+         ${headerfiles} -o ${gensrcdict} ${gccxmlopts} ${rootmapopts} --select=${selectionfile}
+         --gccxmlpath=${GCCXML_home} ${ARG_OPTIONS} ${include_dirs} ${definitions} ${GCCXML_CXX_FLAGS}
+    DEPENDS ${headerfiles} ${selectionfile})
+
+  # Creating this target at ALL level enables the possibility to generate dictionaries (genreflex step)
+  # well before the dependent libraries of the dictionary are build
+  add_custom_target(${dictionary}Gen ALL DEPENDS ${gensrcdict} ${rootmapname})
+endmacro()
+
+#-------------------------------------------------------------------------------
+# relax_dictionary(dictionary headerfile selectionfile OPTIONS opt1 opt2 ...)
+#
+# Generate and build a Reflex dictionary library from the specified header and selection.
+#-------------------------------------------------------------------------------
+function(relax_dictionary dictionary headerfile selectionfile)
+  CMAKE_PARSE_ARGUMENTS(ARG "" "" "LINK_LIBRARIES;OPTIONS" ${ARGN})
+  separate_arguments(ARG_OPTIONS)
+
+  relax_generate_dictionary(${dictionary} ${headerfile} ${selectionfile} OPTIONS ${ARG_OPTIONS})
+  add_library(${dictionary}Rflx MODULE ${gensrcdict})
+  target_link_libraries(${dictionary}Rflx ${ARG_LINK_LIBRARIES} ${ROOT_Reflex_LIBRARY})
+  # ensure that *Gen and *Rflx are not built at the same time
+  add_dependencies(${dictionary}Rflx ${dictionary}Gen)
+  
+  # Installation
+  install(TARGETS ${dictionary}Rflx LIBRARY DESTINATION lib)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${rootmapname} DESTINATION lib)
+  
+endfunction()
+
+#-------------------------------------------------------------------------------
+
+include_directories(${ROOT_INCLUDE_DIR})
+
+add_subdirectory(CLHEPRflx)
+add_subdirectory(HepMCRflx)
+#add_subdirectory(HepPDTRflx)
+add_subdirectory(MathAddRflx)
+add_subdirectory(MathRflx)
+add_subdirectory(ReflexRflx)
+add_subdirectory(STLRflx)
+add_subdirectory(STLAddRflx)
+
+
+
+
Index: Dictionaries/MathAddRflx/CMakeLists.txt
===================================================================
--- Dictionaries/MathAddRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/MathAddRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+if(GCC_VERSION VERSION_GREATER 4.3)
+  add_definitions(-Wno-array-bounds)
+endif()
+relax_dictionary(MathAdd dict/MathAddDict.h dict/selection.xml LINK_LIBRARIES ${ROOT_GenVector_LIBRARY} )
+
+
Index: Dictionaries/STLRflx/CMakeLists.txt
===================================================================
--- Dictionaries/STLRflx/CMakeLists.txt	(revision 0)
+++ Dictionaries/STLRflx/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+include_directories(${ROOT_INCLUDE_DIR})
+
+relax_dictionary(STL dict/STLDict.h dict/selection.xml LINK_LIBRARIES ${ROOT_LIBRARIES})
+
+
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 0)
+++ CMakeLists.txt	(revision 0)
@@ -0,0 +1,8 @@
+cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
+project(RELAX)
+if(CMAKE_COMPILER_IS_GNUCC)
+  execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
+  message("GCC_VERSION=${GCC_VERSION}")
+endif()
+ 
+add_subdirectory(Dictionaries)
