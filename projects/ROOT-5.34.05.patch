Index: cmake/modules/FindGraphviz.cmake
===================================================================
--- cmake/modules/FindGraphviz.cmake	(revision 48791)
+++ cmake/modules/FindGraphviz.cmake	(working copy)
@@ -10,12 +10,12 @@
 endif()
 
 
-find_path(GRAPHVIZ_INCLUDE_DIR graphviz/graph.h PATHS $ENV{GRAPHVIZ_DIR}/include)
+find_path(GRAPHVIZ_INCLUDE_DIR graphviz/graph.h HINTS $ENV{GRAPHVIZ_DIR}/include ${GRAPHVIZ_DIR}/include)
 
-find_library(GRAPHVIZ_CDT_LIBRARY NAMES cdt PATHS $ENV{GRAPHVIZ_DIR}/lib)
-find_library(GRAPHVIZ_GVC_LIBRARY NAMES gvc PATHS $ENV{GRAPHVIZ_DIR}/lib)
-find_library(GRAPHVIZ_GRAPH_LIBRARY NAMES graph PATHS $ENV{GRAPHVIZ_DIR}/lib)
-find_library(GRAPHVIZ_PATHPLAN_LIBRARY NAMES pathplan PATHS $ENV{GRAPHVIZ_DIR}/lib)
+find_library(GRAPHVIZ_CDT_LIBRARY NAMES cdt HINTS $ENV{GRAPHVIZ_DIR}/lib ${GRAPHVIZ_DIR}/lib)
+find_library(GRAPHVIZ_GVC_LIBRARY NAMES gvc HINTS $ENV{GRAPHVIZ_DIR}/lib ${GRAPHVIZ_DIR}/lib)
+find_library(GRAPHVIZ_GRAPH_LIBRARY NAMES graph HINTS $ENV{GRAPHVIZ_DIR}/lib ${GRAPHVIZ_DIR}/lib)
+find_library(GRAPHVIZ_PATHPLAN_LIBRARY NAMES pathplan HINTS $ENV{GRAPHVIZ_DIR}/lib ${GRAPHVIZ_DIR}/lib)
 	
 if(GRAPHVIZ_INCLUDE_DIR AND GRAPHVIZ_CDT_LIBRARY AND GRAPHVIZ_GVC_LIBRARY AND GRAPHVIZ_GRAPH_LIBRARY AND GRAPHVIZ_PATHPLAN_LIBRARY)
   set(GRAPHVIZ_FOUND 1)
Index: config/genreflex.in
===================================================================
diff -r -u -P /build/mato/gcc48-build/LocalInstallArea/ROOT/5.34.05/share/sources/config/genreflex.in ./config/genreflex.in
--- /build/mato/gcc48-build/LocalInstallArea/ROOT/5.34.05/share/sources/config/genreflex.in	2013-04-04 17:46:39.000000000 +0200
+++ ./config/genreflex.in	2013-04-04 18:58:22.000000000 +0200
@@ -1,3 +1,6 @@
-#!/bin/sh
-dir=@libdir@
-python ${dir}/python/genreflex/genreflex.py "$@"
+#!/bin/bash
+if [ "x${ROOTSYS}" = "x" ]; then
+    THIS=$(dirname $0)
+    ROOTSYS=$(cd ${THIS}/..;pwd); export ROOTSYS
+fi
+python ${ROOTSYS}/lib/python/genreflex/genreflex.py "$@"
Index: cmake/modules/SearchInstalledSoftware.cmake
===================================================================
--- ../../../../LocalInstallArea/ROOT/5.34.05/share/sources/cmake/modules/SearchInstalledSoftware.cmake	2013-04-04 16:26:43.000000000 +0200
+++ cmake/modules/SearchInstalledSoftware.cmake	2013-04-04 16:52:58.000000000 +0200
@@ -266,7 +266,7 @@
 if(opengl)
   message(STATUS "Looking for OpenGL")
   find_package(OpenGL)
-  if(NOT OPENGL_FOUND)
+  if(NOT OPENGL_FOUND OR NOT OPENGL_GLU_FOUND)
     if(fail-on-missing)
       message(FATAL_ERROR "OpenGL package not found and opengl option required")
     else()
Index: cmake/modules/FindGSL.cmake
===================================================================
--- cmake/modules/FindGSL.cmake	(revision 48875)
+++ cmake/modules/FindGSL.cmake	(working copy)
@@ -25,14 +25,14 @@
   # look for headers
   find_path( GSL_INCLUDE_DIR
     NAMES gsl/gsl_cdf.h gsl/gsl_randist.h
-	PATHS $ENV{GSL_DIR}/include
+    PATHS $ENV{GSL_DIR}/include ${GSL_DIR}/include
     )
   if( GSL_INCLUDE_DIR )
     # look for gsl library
     find_library( GSL_LIBRARY
       NAMES gsl
-	  PATHS $ENV{GSL_DIR}/lib
-    )
+      PATHS $ENV{GSL_DIR}/lib ${GSL_DIR}/lib
+      )
     if( GSL_LIBRARY )
       set( GSL_INCLUDE_DIRS ${GSL_INCLUDE_DIR} )
       get_filename_component( GSL_LIBRARY_DIRS ${GSL_LIBRARY} PATH )
@@ -41,15 +41,15 @@
  
     # look for gsl cblas library
     find_library( GSL_CBLAS_LIBRARY
-        NAMES gslcblas
-		PATHS $ENV{GSL_DIR}/lib
+      NAMES gslcblas
+      PATHS $ENV{GSL_DIR}/lib ${GSL_DIR}/lib
       )
     if( GSL_CBLAS_LIBRARY )
       set( GSL_CBLAS_FOUND ON )
     endif( GSL_CBLAS_LIBRARY )
  
     set( GSL_LIBRARIES ${GSL_LIBRARY} ${GSL_CBLAS_LIBRARY} )
-	set( GSL_CFLAGS "-DGSL_DLL")
+    set( GSL_CFLAGS "-DGSL_DLL")
   endif( GSL_INCLUDE_DIR )
  
   mark_as_advanced(
@@ -60,10 +60,10 @@
 else( WIN32 AND NOT CYGWIN AND NOT MSYS )
   if( UNIX OR MSYS )
     find_program( GSL_CONFIG_EXECUTABLE gsl-config
+      $ENV{GSL_DIR}/bin
+      ${GSL_DIR}/bin
       /usr/bin/
       /usr/local/bin
-      $ENV{GSL_DIR}/bin
-      ${GSL_DIR}/bin
     )
  
     if( GSL_CONFIG_EXECUTABLE )
Index: graf3d/x3d/CMakeLists.txt
===================================================================
--- graf3d/x3d/CMakeLists.txt	(revision 48875)
+++ graf3d/x3d/CMakeLists.txt	(working copy)
@@ -6,6 +6,7 @@
 
 ROOT_USE_PACKAGE(graf3d/g3d)
 ROOT_USE_PACKAGE(gui/gui)
+include_directories(${X11_INCLUDE_DIR})
 
 ROOT_GENERATE_DICTIONARY(G__X3D TViewerX3D.h TX3DFrame.h LINKDEF LinkDef.h)
 ROOT_GENERATE_ROOTMAP(${libname} LINKDEF LinkDef.h DEPENDENCIES Graf3d Gui)
Index: rootx/CMakeLists.txt
===================================================================
--- rootx/CMakeLists.txt	(revision 48875)
+++ rootx/CMakeLists.txt	(working copy)
@@ -4,6 +4,7 @@
 ############################################################################
 
 ROOT_USE_PACKAGE(core)
+include_directories(${X11_INCLUDE_DIR})
 
 ROOT_EXECUTABLE(root *.cxx  ${CMAKE_SOURCE_DIR}/core/clib/src/strlcpy.c 
                 LIBRARIES ${X11_LIBRARIES} ${X11_Xpm_LIB} ${X11_Xft_LIB} ${X11_Xext_LIB})
Index: test/CMakeLists.txt
===================================================================
--- test/CMakeLists.txt	(revision 48875)
+++ test/CMakeLists.txt	(working copy)
@@ -11,9 +11,13 @@
 include(${ROOT_USE_FILE})
 
 include_directories(${ROOT_INCLUDE_DIRS})
-include_directories(${ROOT_INCLUDE_DIRS}/../tutorials)
+if(DEFINED ROOT_SOURCE_DIR)  # Testing using the binary tree
+  include_directories(${ROOT_SOURCE_DIR}/tutorials)
+  include_directories(${ROOT_SOURCE_DIR}/tmva/inc)
+else()
+  include_directories(${ROOT_INCLUDE_DIRS}/../tutorials)
+endif()
 
-
 #---environment-------------------------------------------------------------------------------
 ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment)
 
Index: graf2d/x11/CMakeLists.txt
===================================================================
--- graf2d/x11/CMakeLists.txt	(revision 48875)
+++ graf2d/x11/CMakeLists.txt	(working copy)
@@ -5,6 +5,7 @@
 set(libname GX11)
 
 ROOT_USE_PACKAGE(core)
+include_directories(${X11_INCLUDE_DIR})
 
 ROOT_GENERATE_DICTIONARY(G__${libname} T*.h LINKDEF LinkDef.h)
 ROOT_GENERATE_ROOTMAP(${libname} LINKDEF LinkDef.h)
